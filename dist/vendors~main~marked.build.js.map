{"version":3,"sources":["webpack:///./node_modules/marked/lib/marked.js"],"names":["global","root","block","newline","code","fences","noop","hr","heading","nptable","blockquote","list","html","def","table","lheading","paragraph","text","Lexer","options","this","tokens","links","marked","defaults","rules","normal","gfm","tables","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","merge","lex","src","prototype","token","top","next","loose","cap","bull","b","space","i","tag","l","exec","substring","length","push","type","pedantic","lang","depth","header","split","align","cells","test","ordered","match","indexOf","RegExp","smartLists","slice","join","charAt","sanitize","pre","sanitizer","toLowerCase","href","title","Error","charCodeAt","inline","escape","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","TextRenderer","Parser","encode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","name","val","resolveUrl","base","baseUrls","_scheme","_email","_inside","_href","_backpedal","output","out","mangle","inLink","outputLink","codespan","trim","smartypants","image","ch","Math","random","toString","escaped","highlight","langPrefix","quote","level","raw","headerPrefix","xhtml","body","listitem","tablerow","content","tablecell","flags","prot","decodeURIComponent","e","baseUrl","originIndependentUrl","parse","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","obj","target","key","arguments","Object","hasOwnProperty","call","callback","pending","done","err","message","silent","setOptions","parser","lexer","inlineLexer","module","exports","window"],"mappings":"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","file":"vendors~main~marked.build.js","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n?(?!hr|heading|lheading| {0,3}>|tag)[^\\n]+)+)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"|[^\"]|\"[^\"\\n]*\")*\"|'\\n?(?:[^'\\n]+\\n?)*'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = edit(block.html)\n  .replace('comment', /<!--[\\s\\S]*?-->/)\n  .replace('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  .replace('closing', /<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"\\/>\\s]*)*?\\/?>/)\n  .replace(/tag/g, block._tag)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', '<' + block._tag)\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      space,\n      i,\n      tag,\n      l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase();\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?[a-zA-Z0-9\\-]+(?:\"[^\"]*\"|'[^']*'|\\s[^<'\">\\/\\s]*)*?\\/?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^_([^\\s_](?:[^_]|__)+?[^\\s_])_\\b|^\\*((?:\\*\\*|[^*])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\n\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex()\n\ninline._inside = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = edit(inline.link)\n  .replace('inside', inline._inside)\n  .replace('href', inline._href)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('inside', inline._inside)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('email', inline._email)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')\n    .getRegex()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      cap[0] = this.rules._backpedal.exec(cap[0])[0];\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href),\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return text;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return text;\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n}\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n}\n\nTextRenderer.prototype.br = function() {\n  return '';\n}\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer(),\n  xhtml: false,\n  baseUrl: null\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n"],"sourceRoot":""}