{
  "随想": [
    {
      "name": "书写以及文字",
      "slice": "人的大部分生命体验是受限于当下的，一切感官所带来的体验都将被时间禁锢于当下，当下即逝，无常处处皆是，即便我们的意识也是如此，虽然我们可以靠着记忆短暂的回溯过去的体验以及思考，但是，大脑并非总是可靠的，即便借助于非凡的记忆，你能记住所有的一切，但是依旧被自身以及时间所限制，你无法将你的体验你的思考跨越时间传递于它人，这是靠语言言传身教所不能做到的。文字以及书写的意义就在于此，我们可以将自己的体验，思想寄托于文字，载于书本亦或者其它载体上，相较于人短暂的一身，这些载体却是可以穿越很长一段时空的事物，甚至可以轻易复制，一代，一代流传至永远。对于个人而言，书写也许并非为了传递思想，最重要的是回溯自己，你的思考，你的体验，你的一切，都可以化作文字，对于记忆并非出众的我而言，这毫无疑问是最好的恩赐了。文字所载的文章变化，忠实的记录着人的改变，从过去的自己中吸取经验，创造更好的未来，将思想一遍一遍洗筛，如同淘金一般，凝结出最深刻的洞见。"
    },
    {
      "name": "熵与人生",
      "slice": "熵，我一直以来将其当作一个物理学单位待之，事实上，从本质上而言，世界是遵守于物理定律的，生活，人，亦是这个世界的一部分。也许我应当庆幸自己能够知道这个概念，我察觉到了生活中那些导致我痛苦之事的根源，于我而言，令我苦恼之事显然来自于工作，无穷尽的工作，繁忙的工作，所有的这些工作于我而言真是困难的吗？当然不是，这些事情并无多大挑战性，导致我苦恼的根源并非与事件本身，而是我在这无穷尽的事件中所感到的迷茫，事情多又掌控不过来，心便乱，苦恼随之而生。说到底，于诸事之间，心不能安，此之为苦源。为何不能安？掌控不了，事件的发生和结束很大程度都不由你所掌控，试图去掌控这样的事情，显然是不可能的。我曾看到各种各样的工作方法，时间管理方法，大抵可以归为两类，其一为自律，其二，都是在试图在不断流逝的时间洪流中去掌控自己，我们会将事情分而化之，分而治之，我们会按其轻重缓急列其次序，以上种种皆是让自己心安之法。若是不行这些方法会如何，熵就会如同物理学中描述的那般一样，无序会慢慢滋生，慢慢的随着时间增长，一旦超过你所能掌控的界限，就会给你造成苦恼。因此我们必须做的就是维持熵值，不能让其超出你所能掌控的极限，维持熵"
    },
    {
      "name": "关于沟通",
      "slice": "思考和表达这两种能力并非正相关的，也许你的思考能够达到很深的程度，但是这并不意味着你能将如此深奥的思考表达出来。当我们对某个对象展开思考或者表达时，对于思考而言，我们思考的对象将会随着思考的深度逐渐变得复杂抽象起来，但表达却是另外一个过程，我们需要将表达的对象变得形象，简单，明确起来这是两种截然相反的过程，思考时将对象变复杂抽象，而表达确实将思考变得简单形象。与思考不同的还有一点就是，思考是为了让自己理解，而表达却是为了让他人理解。你想的是A ,说出来的却是B， 别人听到以为C，然后事实却是Ｄ这样的情况是经常发生的。人之患，在好为人师，无论如何，保持谦虚总是一种必要心态，错误往往是因为过度自信所导致的，而非小心谨慎。必须承认，人与人之间是存在差异的，无视这点只会让自己陷入进退两难之地，做任何与他人合作的事情时，这点是必须认识到的，否则事情将很难进展下去，有时候并非你的计划不好，而是他人无法理解你的意图，再好的流程也会在执行过程中出错，人与人之间的差异不仅体现在信息的不对称上，还有更多。"
    },
    {
      "name": "自由",
      "slice": "人生的目的或许是为了追求自由吧，各种意义上的自由，你的工作为你带来了一定程度的消费自由，但你期望更多财务自由，为此而更加努力的工作着。你喜欢看书，你获取知识，摄取理性，这使得你的精神和思想得以解放，这是对精神自由的追求。所有的勤勉与努力，或多或少就是内心对自由的向往吧，这种对自由的渴望，仿佛是没有止境一般，因为存在，就是最大的约束。"
    },
    {
      "name": "不求甚解与刨根问底",
      "slice": "怀疑自己有强迫症，遇到不能理解的问题总是钻牛角尖似的想弄明白，很随意地就能扑在一个问题上耗个几天，有些时候也佩服自己的执着，特别是当一个问题经过冥思苦想最终念头通达的时候，那就像卸下包袱瞬间得到释放和自由的感觉，刷算法题就经常如此。  但是，能够念头通达的好运不是时常都有的，总会有那么些问题会像堡垒一样立在你面前，怎么都攻克不了，凭时间去一点一点磨也做不到，这个时候就会感到焦虑和绝望了，这若是智商的天花板，那就更绝望了。对此我更有相信，之所以不能理解，并非源自智商，而是缺乏足够的信息，这些信息是经验、知识、实例。刨根问底是好的，如果能够清楚的知道自己到底在哪碰壁，是哪一点不能理解，那么在时间充裕的情况下是可以继续刨下去。但是如果你没法获得足够的信息，甚至不理解自己为何不能理解，那就要适可而止了。  我赞同这样刨根问底的精神，但有时候也应当不求甚解，在有限时间内的学习，不能将大量的时间耗在这种刨根问底的行为上，有些东西总是需要有足够的例子去支撑才能理解的，最好是分阶段来，第一阶段不求甚解大量积累案例和知识，再逐步深入细化刨根问底，一开始就想着彻底理解一个东西，那既困难又不现实，反而使自己"
    }
  ],
  "碎念": [
    {
      "name": "国庆游记",
      "slice": "双脚踏足地狱，而眼睛放在天堂，雨崩，云南最后一片未被开发的处女地，从半专业徒步跨入专业徒步的必经之旅。本来国庆计划去雨崩徒步，为此特地请了三天假，加上中秋国庆一起足足11天，然而最终还是因为时间关系未能踏足“天堂”，看了微信里朋友发的照片时，更是觉得可惜，雨崩也成了我云南之旅最大的遗憾了。这是一场计划好的旅行，而我也并未抱着旅游的心态，因此在装备准备上也是以轻便为主，虽然落下遗憾，但是总体来说也是不虚此行吧。抱着何种心态去一个地方所带来的感受是截然不同的，此行既是旅行，那便做好了面对挑战的准备，途中所经历的一切未知对我而言都是收获，不论其带来的感受是艰苦亦或者快乐。谈到大理，第一个想到的词就是“风花雪月”， 也确实如此，在大理的街道边，古城里，这个词总是时不时闯入眼中，而我的大理之行，感受最不深的恰恰却是这个词,而是一种被微风包裹的惬意与悠闲，仿如沉入美梦，忘了忧愁。说道每个地方最不能错过的，美食往往总在其列，云南的米线给我第一映像就是画风不一样，这里的鸡腿套餐土鸡米线，鸡腿真大大大大大大！完全颠覆了我20块钱能想象的范围。在洱海边骑着电摩托悠闲着享受风的吹拂，尽管此时已是十月之初，大"
    },
    {
      "name": "通过gitHub与Issues构建博客",
      "slice": "简单来说就是在Issues里写博文，通过官方提供的API来获取数据，然后再由前端的MD解析器动态渲染到页面上。  API:https://developer.github.com/v3/issues/"
    },
    {
      "name": "雨",
      "slice": "狂风暴雨下撑伞并没什么用，还不如一件雨衣来得实在。"
    },
    {
      "name": "Coding",
      "slice": "在公司忙活项目的Coding，回到家中亦是摆弄自己的代码，对我而言却是极其幸运的，因为爱好即是工作。张嘴就唠叨个不停，没人聊就撩计算姬好了😂"
    },
    {
      "name": "Ukulele",
      "slice": "一直想学个乐器来挑战下，在吉他和Ukulele之间犹豫了很久，直到看了jake shimabukuro的视频，卧槽？！这还能这么玩？于是便被种草了。 当晚就在狗东下单买了kaka KUC-MAD，即便明知道可能是吃灰的命运，但依旧毫无犹豫。 管他呢，再不济也能当做摄影道具，摆件，或者墙饰之类的。（我这样安慰自己=。=）"
    },
    {
      "name": "七夕",
      "slice": "毫无悬念，这个日子对我而言依旧没有意义，不过倒也过得意外的充实，好死不死的科目二考试约在了8月29日，理所当然，考前当然要好好突击训练一番咯，为此特地请假两天，领导吐槽说，这考试代价真高啊，考试的调休是用双倍工资的钱换来的，当天模拟考试一个半小时就是400块钱花费，如此代价之下不过简直对不起这投入啊。考前一天，早上七点半就赶往驾校，平时上班也没这么早啊，泪~~，比早起更可怕的是台风，今年深圳真是神奇了，天鸽刚过不到一周，又迎来今年第14号台风“卡帕”，真是可怕，不得不冒着暴雨练习，在此已经做好了明天雨中考试的准备，好在幸运眷顾，考试当天放晴，艳阳高照，也许我昨天看的是假的天气预报吧，考试的第一把直接挂在左倒库，倒车不入，差点心态爆炸，想着没有压线，位置准的一比，这把肯定稳，结果因为座椅没调给挂了，第二把就随意了，大不了就下月再考呗，结果第二把险过。所以说，科目二考试的不光是技巧和熟练度，还考心理素质啊，回想下平时训练，无非就是那几个套路，对那几个点。幸运貌似只眷顾了我？同行三人考试就我一个过了，汗(⊙﹏⊙)b，祝福每天和我一起练车的妹子，辛苦了，感谢~，反正她看不到。^_^报名的时候和"
    },
    {
      "name": "超酷炫的字体",
      "slice": "如图，Iosevka是一个非常酷炫与性感的开源的字体。没错！它是用代码生成的, 非常适合Coding，使用之后，感觉Coding有神奇的Buff加成！截图可能不够清晰，但实际效果是非常棒的！View SpecimenIosevka GitHub"
    }
  ],
  "编码": [
    {
      "name": "博客搬家",
      "slice": "阿里云(套路云)的客服打电话给我说他们双十一活动，服务器打折，于是活动期间没能忍住手买了 1C1G 的丐版服务器，选了香港区，想着再怎么吃灰也能当个梯子嘛，果然，这手真是忍不住的。吭哧吭哧把博客挪到云服务器上后，第一时间干掉了 coding.net 的页脚，然后用 acme.sh 申请了 Let’s Encrypt 的证书，证书到期自动更新，看到域名旁边的小绿锁，完美！趁着机会又复习了下nginx的配置，既然都上了服务器了，后续就可以考虑不用静态博客了,笑~正巧最近学习 Golang ，准备自己手撸一个微服务框架，已经把框架的 Router 撸出来了，这坑又不知道什么时候能填完。然后... 是不是前端也要换换呢？ 最近 Vue 2.5 提供更好的 TypeScript 支持，于是突然又有了一个大胆的想法，乘机会玩玩吧，现在博客速度太慢了，主要是静态资源这块需要优化，考虑薅各大 CDN 的免费流量试试~"
    },
    {
      "name": "CSS3动画学习",
      "slice": "属性CSS3 中涉及动画的三个属性为 transitions, transforms, animation。transition： 一般用于过渡动画处理transform： 用于变换，旋转、拉伸、收缩等animation： 用于动画transitiontransition-property：指定应用过渡属性的名称transition-duration：指定过渡的持续时间transition-delay：延迟过渡时间transition-timing-function: 指定过渡类型"
    },
    {
      "name": "博客文章获取接口修改",
      "slice": "改成从项目源码中读取md文件，GitHub的接口调用有限制，如果不用access_token调用的话是有60次/每小时的调用次数的，用token则有5000次/每小时，这对博客来说是够用了。因此，可以申请一个只读权限的token，但是token如果直接写在源码内并上传至GitHub仓库，则会被GitHub的安全机制检查出来，申请的token就会被被删除（GitHub为了避免程序员误传Token真时操碎心 - -|||），但是，在源码内简单掩饰下可以绕过这个检查了，这样玩的话，就要注意申请的Token权限范围。"
    },
    {
      "name": "数据抽象",
      "slice": "现在到了数学抽象中最关键的一步：让我们忘记这些符号所表示的对象。（数学家）不应该在这里止步，有许多操作可以应用于这些符号，而根本不必考虑它们到底代表这什么。————Hermann Weyl, 思维的数学方式SICP在我这似乎是一本永远读不完的书，一方面在于其难度，另一方面在于其不少的练习题，必须承认一点，可能确实是自己水平有限，每一道题对我而言都并不是那么容易的，几乎每道题都要经过仔细的思考才能做出来，面对这本书，我觉得更应当视其为一本数学书来对待，回忆下看数学教材时被其中的显然，易得等词汇爆掉脑袋然后怀疑人生的感觉吧，书中每一个知识点都有许多“小习题”等你来解决，但是，你真以为这些小习题能够轻松解决掉，那就太天真了，我曾经膝盖就中过一箭，这些小习题对我而言称之为时间黑洞也不为过，当然，或许真的有大神能把这些小习题快速刷掉吧，毕竟这个世界总是存在一些人能够如同数学教材作者那样，对“显然”，“易得”等这样的词汇有着相同感触。做这些习题是不容易的，若是不做的话，这本书恐怕也读不出什么意义来。正是这种不易所带来的挑战感促使着自己不断去完成这些练习，尽管它们并不能对工作或实际项目带来太多直接的"
    },
    {
      "name": "通过acme.sh申请Let's Encrypt证书",
      "slice": "已经可以看到很多网站都启用了https，这年头丢个http的链接出去都有点不好意思了，当然，HTTPS的好处也不仅是好看这么简单，相较于HTTP，它带来的最直接好处就是你再也不用担心恶心的运营商劫持并植入广告了，还有被GFW墙掉的风险，你担心网页打开速度？SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。  现在各大浏览器厂商也开始对非HTTPS站点标记不安全标识，同时搜索引擎也开始降低非https网站的权重，国内各大网站已经全面上HTTPS了。我这种小博客也寻思着如何追赶潮流，但是证书是要钱滴，而且级别越高价格越贵，好在有Let&#39;s Encrypt这个免费颁发DV证书的CA，看到SPONSORS里一堆大佬，所以应该是挺可靠的。虽然提供的证书有效期短，但是借住acme.sh这个国人开发的工具，可以很方便的自动申请并更新证书，因此尽管放心使用好了。acme.sh是一个实现了ACME协议的linux命令行工具，那在windows上咋用？如果你是win10，那么安装Ubuntu子系统即可，具体使用看官方文档。"
    },
    {
      "name": "攀登抽象的阶梯",
      "slice": "常见的三种编程范式命令式(过程式)函数式对象式命令式与函数式编程的主要区别体现在对过程提供的抽象能力上，在lisp中赋予了过程第一级权利:  可以将过程命名  可以提供给其它过程作为参数或作为返回结果可以包含在数据结构中  第二点实现的代价就意味着将过程作为值返回，需要为过程中的变量提供存储环境，无论其是否被调用，如果采用词法作用域，那这就是闭包，在典型的命令式编程语言中，例如C语言，我们或许可以通过某些方式实现第一级权利，比如传递指针。  但是，两种编程范式的差异不仅体现在这一方面，还有对待副作用的态度，也就是赋值。在函数式编程中，函数的概念更贴近数学中映射的概念，输入参数，输出结果，简单的映射，将输入集映射到结果集，过程执行中不改变外部环境的状态，也不依赖外部环境的状态。由此引入了更多源自数学的概念，如高阶函数，偏函数，柯里化，函数组合等。  在命令式编程的典型C语言中，同样提供了对过程的抽象能力，即将过程抽象为函数，但是此函数就并非函数式编程语言里的函数了，最显然的是没有第一级特权。我们在命令式编程语言中所用到的最重要的特性与思想是变量这一概念，而非函数。这一概念源于计算机科学家"
    },
    {
      "name": "又一篇什么是Monad",
      "slice": "一开始抱着猎奇的心态学习各种编程语言，从汇编、C/C++、Python、直到LISP。工作后才幡然醒悟，学这么多编程语言而不去使用，那无异于“以有涯随无涯”，最后回首才发现遗忘是多么可怕的事情，学了这么多编程语言到如今也几乎忘得差不多了。当然，并不能因为遗忘而否定学习的意义，学习的意义正是那些遗忘之后留下的东西，学过这么多编程语言，了解了这么多编程范式，学起新的语言来也确实颇有一番一通百通的感觉，拿起文档就写，新语言的特性也能很快上手。真正停止追逐语言的脚步，是从SICP开始的，像是受到了启示，学语言这么久，感触最深的一点，那就是对于学习者而言，需要的不是一本规范，也不是一本操作手册，而是一本解释，SCIP正好回答了我的疑惑，正如其书名所言，讲的是计算机程序的构造与解释，理解到编程活动的本质是通过抽象手段控制复杂度这样道理后，对语言也就没有了追求，转而关注各类语言中所提供的“抽象方式”，对某门语言的学习，仅仅是学习如何在其中恰当的表达思想，不再去死扣规范和各种细节，当然，如果这门语言是工作用的，那才值得这样做。当见识到抽象的力量之后就一发不可收拾，在函数式编程里充斥着各种“黑魔法”，而"
    }
  ],
  "哲思": [
    {
      "name": "数据抽象",
      "slice": "现在到了数学抽象中最关键的一步：让我们忘记这些符号所表示的对象。（数学家）不应该在这里止步，有许多操作可以应用于这些符号，而根本不必考虑它们到底代表这什么。————Hermann Weyl, 思维的数学方式SICP在我这似乎是一本永远读不完的书，一方面在于其难度，另一方面在于其不少的练习题，必须承认一点，可能确实是自己水平有限，每一道题对我而言都并不是那么容易的，几乎每道题都要经过仔细的思考才能做出来，面对这本书，我觉得更应当视其为一本数学书来对待，回忆下看数学教材时被其中的显然，易得等词汇爆掉脑袋然后怀疑人生的感觉吧，书中每一个知识点都有许多“小习题”等你来解决，但是，你真以为这些小习题能够轻松解决掉，那就太天真了，我曾经膝盖就中过一箭，这些小习题对我而言称之为时间黑洞也不为过，当然，或许真的有大神能把这些小习题快速刷掉吧，毕竟这个世界总是存在一些人能够如同数学教材作者那样，对“显然”，“易得”等这样的词汇有着相同感触。做这些习题是不容易的，若是不做的话，这本书恐怕也读不出什么意义来。正是这种不易所带来的挑战感促使着自己不断去完成这些练习，尽管它们并不能对工作或实际项目带来太多直接的"
    },
    {
      "name": "对自我的思考",
      "slice": "生命是一个攀登阶梯的过程，很多人都以为这个阶梯只有一处，事实上却是有两处，一处登顶物质的巅峰，一处登顶精神的巅峰，一处通往外界的物质世界，一处通往内在的精神世界。  后者是孤独的，是少有人走的，并且随着物质世界的不断发展，选择后者的愈来愈少，更有甚者看不到这条路。通往内心的精神之路是孤独的，亦是困难的，为何而困难？因为它要求反求诸己，认识你自己。  认识并反省自己是第一个困难障碍，这涉及到一个重要的哲学问题，我是谁？  生命的无常往往使人迷失在脑海中无尽的念头中，往往错把那个脑海中的声音当做了所谓的我，我不开心，我想要，我要做，这些念头是我吗？若如此，那就后陷入无尽的追逐中去，这些念头是无常的，你永远无法把握住它的走向，往往仅是环境的波动，就会生出不同的念头来，被这样的无常牵引着，显然是不智的，你以为这样的念头是你自己，当你今天做出决定，明天行动时就会发现，昨天那个信誓旦旦做出决定的我呢？为何我没有了昨天那股热切的心情？为何我的计划无法实施？仿佛每时每刻的我都不是同一个人，我总是在当下之我与过去之我间徘徊与斗争，甚至不知下一刻之我又将会生出何种念想，于是焦虑产生了。我们常说的挑战自我，"
    },
    {
      "name": "攀登抽象的阶梯",
      "slice": "常见的三种编程范式命令式(过程式)函数式对象式命令式与函数式编程的主要区别体现在对过程提供的抽象能力上，在lisp中赋予了过程第一级权利:  可以将过程命名  可以提供给其它过程作为参数或作为返回结果可以包含在数据结构中  第二点实现的代价就意味着将过程作为值返回，需要为过程中的变量提供存储环境，无论其是否被调用，如果采用词法作用域，那这就是闭包，在典型的命令式编程语言中，例如C语言，我们或许可以通过某些方式实现第一级权利，比如传递指针。  但是，两种编程范式的差异不仅体现在这一方面，还有对待副作用的态度，也就是赋值。在函数式编程中，函数的概念更贴近数学中映射的概念，输入参数，输出结果，简单的映射，将输入集映射到结果集，过程执行中不改变外部环境的状态，也不依赖外部环境的状态。由此引入了更多源自数学的概念，如高阶函数，偏函数，柯里化，函数组合等。  在命令式编程的典型C语言中，同样提供了对过程的抽象能力，即将过程抽象为函数，但是此函数就并非函数式编程语言里的函数了，最显然的是没有第一级特权。我们在命令式编程语言中所用到的最重要的特性与思想是变量这一概念，而非函数。这一概念源于计算机科学家"
    }
  ]
}